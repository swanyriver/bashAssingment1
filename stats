#!/bin/bash

#Set trap to exit gracefully on error


############TO ACOMODATE TRACE STATEMENTS#########################
#export a file path to $logfile before runing script to capture 
#a log of trace statements, otherwise they are directed to /dev/null
#used in conjuction with tail -f logfile for live logging
#I would have used an argument such as -l followed by filename but I wanted to preserve the
#argument handling to just those specified by the assignment
if [ -z "$logfile" ] ; then
	logfile=/dev/null
fi
echo -e "\n\n-------Logging For stats pid $$---------" >>$logfile

#VARIABLE DECLARATIONS
collumns=true
stat_file="$$statfile"

#################Process command args###########################

##check number
echo "$# of command args recieved" >>$logfile

if [[ ! ( "$#" == 1 || "$#" == "2" ) ]] ; then

    echo "incorect num arguments recieved" >&2
    exit 1
fi


############error check and record -r/-c########
###check that it is -r || -c
###assign collumns accordingly
echo "abreviated flag is ${1:0:1}" >>$logfile
if [[ "${1:0:1}" == "-r" ]]; then

    echo "Rows selected" >>$logfile
    $collumns=false
    
    #set Getline to return rows
    
elif [[ "${1:0:1}" == "-r"  ]]; then

    echo "collumns selected" >>$logfile
    $collumns=true
    
    #set Getline to return collumns
    



############error check and record filename######
if [[ "$#" == "2" ]] ; then
    stat_file=$2
    echo "stats are located in $stat_file" >>$logfile

    #check file is present and readable
    if [ ! -r "$stat_file" ] ; then
        echo "File is unreadable or does not exist" >&2
        exit 1
    fi



else
    #detect std in
    if [ ! -t 0 ] ; then
    	echo "recieving input from STDIN" >>$logfile

        #DUMP CONTENTS OF STDIN TO FILE

    	#create a new empty file
    	cp /dev/null $stat_file

    	while read inputLine
    	do
    		echo $inputLine >> $stat_file
    	done
    else
        #no file specified but no data available in stderr
    	echo "no file specified and no input available, Exiting now">&2
        exit 1
    fi

fi


####Stats program started successfully, proper args and readable file###

#########Define GetLine() row or col version##########

if [[ "$collumns" == "true" ]] ; then
    #get collumns
    echo "defining collumns GetLine function" >>$logfile
else
    #get collumns
    echo "defining rows GetLine function" >>$logfile
fi

#count items per row


exit 0
#!/bin/bash

####Clean up and cleanExit function###Recieves cleanExit code##
function cleanExit {
    
    echo "program exiting with exit code $1" >>$logfile

    #change to -f before submiting  TODO
    rm -I -v $$* >>$logfile 2>>$logfile

    if [[ ! "$1" == 0 ]]; then
        echo "Error Message: $2" >>$logfile
        echo -e "$2 \nExiting stats program now" >&2
    fi

    exit $1
}


#Set trap to exit gracefully on error
trap "cleanExit 1 \"process interupted\"" INT HUP TERM


############TO ACOMODATE TRACE STATEMENTS#########################
#export a file path to $logfile before runing script to capture 
#a log of trace statements, otherwise they are directed to /dev/null
#used in conjuction with tail -f logfile for live logging
#I would have used an argument such as -l followed by filename but I wanted to preserve the
#argument handling to just those specified by the assignment
if [ -z "$logfile" ] ; then
	logfile=/dev/null
fi
echo -e "\n\n-------Logging For stats pid $$---------" >>$logfile

#VARIABLE DECLARATIONS
stat_file="$$statfile"

#################Process command args###########################

##check number
echo "$# of command args recieved" >>$logfile

if [[ ! ( "$#" == 1 || "$#" == "2" ) ]] ; then 
    cleanExit 1 "Incorect number of arguments recieved\nuse format: stats {-rows|-cols} [input_file]"
fi


############error check and record filename######
if [[ "$#" == "2" ]] ; then
    stat_file=$2
    echo "stats are located in $stat_file" >>$logfile

    #check file is present and readable
    if [ ! -r "$stat_file" ] ; then
        cleanExit 1 "File is unreadable or does not exist"
    fi



else
    #detect std in
    if [ ! -t 0 ] ; then
    	echo "recieving input from STDIN" >>$logfile

        #DUMP CONTENTS OF STDIN TO FILE

    	#create a new empty file
    	cp /dev/null $stat_file

    	while read inputLine
    	do
    		echo $inputLine >> $stat_file
    	done
    else
        #no file specified but no data available in stderr
        cleanExit 1 "No file specified and no input available"
    fi

fi

############error check and record -r/-c###################################
###check that it is -r || -c
###assign collumns accordingly and getGroup acordingly
### use getgroup with command subtition to store result, $1 is row/col num
### nextLine=$(getGroup n)
###########################################################################
echo "abreviated flag is ${1:0:2}" >>$logfile
if [[ "${1:0:2}" == "-r" ]]; then

    echo "Rows selected" >>$logfile
    collumns=false
    
    #set getGroup to return rows
    function getGroup {
        echo "getgroup outputing row $1" >>$logfile
        head "-$1" $stat_file | tail -1
    }
    
elif [[ "${1:0:2}" == "-c"  ]]; then

    echo "collumns selected" >>$logfile
    collumns=true

    #set getGroup to return collumns
    function getGroup {
        echo "getgroup outputing collumn $1" >>$logfile
        cut -f $1 $stat_file | tr '\n' '\t'      
    }
else
    cleanExit 1 "Incorect selector flag, Exiting now"
fi

########################################################################
####Stats program started successfully, proper args and readable file###
########################################################################


#count cols and rows


nextline=$(getGroup 2)
echo $nextline

for num in $nextline;
do
    echo $num
done


#########Print output################

if $collumns ; then
    #print collumns stats
    echo "outputing collum stats" >>$logfile
else
    #print row stats
    echo "outputing row stats" >>$logfile
fi


cleanExit 0